
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author star
 */
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class PaiGowPokerGUI extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public PaiGowPokerGUI() {
        this.numberToCardNameMap = new java.util.HashMap<>();
        this.selectCardQueue = new LinkedList<>();
        this.pokersBuilder = new PokersBuilder();
        this.cardsChecker = new CardsTypeChecker();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ChipButtonGroup = new javax.swing.ButtonGroup();
        ComputerCardsPanel = new javax.swing.JPanel();
        ComputerHighHandPanel = new javax.swing.JPanel();
        ComputerCard1 = new javax.swing.JLabel();
        ComputerCard2 = new javax.swing.JLabel();
        ComputerCard3 = new javax.swing.JLabel();
        ComputerCard4 = new javax.swing.JLabel();
        ComputerCard5 = new javax.swing.JLabel();
        ComputerLowHandPanel = new javax.swing.JPanel();
        ComputerCard6 = new javax.swing.JLabel();
        ComputerCard7 = new javax.swing.JLabel();
        UserCardsPanel = new javax.swing.JPanel();
        UserHighHandPanel = new javax.swing.JPanel();
        UserCardMouseListener userCardMouseListener = new UserCardMouseListener();
        UserCard1 = new javax.swing.JLabel();
        UserCard2 = new javax.swing.JLabel();
        UserCard3 = new javax.swing.JLabel();
        UserCard4 = new javax.swing.JLabel();
        UserCard5 = new javax.swing.JLabel();
        UserLowHandPanel = new javax.swing.JPanel();
        UserCard6 = new javax.swing.JLabel();
        UserCard7 = new javax.swing.JLabel();
        SplitPanel = new javax.swing.JPanel();
        MakeSplit = new javax.swing.JButton();
        ControlPanel = new javax.swing.JPanel();
        PokerChipsPanel = new javax.swing.JPanel();
        ChipButton1 = new javax.swing.JButton();
        ChipButton2 = new javax.swing.JButton();
        ChipButton3 = new javax.swing.JButton();
        ChipButton4 = new javax.swing.JButton();
        ChipButton5 = new javax.swing.JButton();
        ChipTextField = new javax.swing.JTextField();
        BetControlPanel = new javax.swing.JPanel();
        MakeDealButton = new javax.swing.JButton();
        MakeResetButton = new javax.swing.JButton();
        BalanceLabel = new javax.swing.JLabel();
        BetLabel = new javax.swing.JLabel();
        BalanceTextField = new javax.swing.JTextField();
        BetTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ComputerCardsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Computer's Card"));

        ComputerHighHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("HighHand"));

        javax.swing.GroupLayout ComputerHighHandPanelLayout = new javax.swing.GroupLayout(ComputerHighHandPanel);
        ComputerHighHandPanel.setLayout(ComputerHighHandPanelLayout);
        ComputerHighHandPanelLayout.setHorizontalGroup(
            ComputerHighHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComputerHighHandPanelLayout.createSequentialGroup()
                .addComponent(ComputerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComputerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComputerCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComputerCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ComputerCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        ComputerHighHandPanelLayout.setVerticalGroup(
            ComputerHighHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComputerHighHandPanelLayout.createSequentialGroup()
                .addGroup(ComputerHighHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComputerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComputerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComputerCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComputerCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComputerCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        ComputerCardsPanel.add(ComputerHighHandPanel);

        ComputerLowHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LowHand"));

        javax.swing.GroupLayout ComputerLowHandPanelLayout = new javax.swing.GroupLayout(ComputerLowHandPanel);
        ComputerLowHandPanel.setLayout(ComputerLowHandPanelLayout);
        ComputerLowHandPanelLayout.setHorizontalGroup(
            ComputerLowHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ComputerLowHandPanelLayout.createSequentialGroup()
                .addComponent(ComputerCard6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComputerCard7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ComputerLowHandPanelLayout.setVerticalGroup(
            ComputerLowHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ComputerCard6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(ComputerCard7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        ComputerCardsPanel.add(ComputerLowHandPanel);
        ComputerLowHandPanel.getAccessibleContext().setAccessibleName("");

        UserCardsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("User's Card"));

        UserHighHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("HighHand"));

        UserCard1.setName("UserCard1");
        UserCard1.addMouseListener(userCardMouseListener);

        UserCard2.setName("UserCard2");
        UserCard2.addMouseListener(userCardMouseListener);

        UserCard3.setName("UserCard3");
        UserCard3.addMouseListener(userCardMouseListener);

        UserCard4.setName("UserCard4");
        UserCard4.addMouseListener(userCardMouseListener);

        UserCard5.setName("UserCard5");
        UserCard5.addMouseListener(userCardMouseListener);

        javax.swing.GroupLayout UserHighHandPanelLayout = new javax.swing.GroupLayout(UserHighHandPanel);
        UserHighHandPanel.setLayout(UserHighHandPanelLayout);
        UserHighHandPanelLayout.setHorizontalGroup(
            UserHighHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserHighHandPanelLayout.createSequentialGroup()
                .addComponent(UserCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UserCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        UserHighHandPanelLayout.setVerticalGroup(
            UserHighHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserHighHandPanelLayout.createSequentialGroup()
                .addGroup(UserHighHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        UserCardsPanel.add(UserHighHandPanel);
        UserHighHandPanel.getAccessibleContext().setAccessibleName("");

        UserLowHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LowHand"));

        UserCard6.setName("UserCard6");
        UserCard6.addMouseListener(userCardMouseListener);

        UserCard7.setName("UserCard7");
        UserCard7.addMouseListener(userCardMouseListener);

        javax.swing.GroupLayout UserLowHandPanelLayout = new javax.swing.GroupLayout(UserLowHandPanel);
        UserLowHandPanel.setLayout(UserLowHandPanelLayout);
        UserLowHandPanelLayout.setHorizontalGroup(
            UserLowHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserLowHandPanelLayout.createSequentialGroup()
                .addComponent(UserCard6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserCard7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        UserLowHandPanelLayout.setVerticalGroup(
            UserLowHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(UserCard6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(UserCard7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        UserCardsPanel.add(UserLowHandPanel);
        UserLowHandPanel.getAccessibleContext().setAccessibleName("");

        MakeSplit.setText("Split");
        MakeSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeSplitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SplitPanelLayout = new javax.swing.GroupLayout(SplitPanel);
        SplitPanel.setLayout(SplitPanelLayout);
        SplitPanelLayout.setHorizontalGroup(
            SplitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SplitPanelLayout.createSequentialGroup()
                .addGap(408, 408, 408)
                .addComponent(MakeSplit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SplitPanelLayout.setVerticalGroup(
            SplitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MakeSplit)
        );

        ControlPanel.setLayout(new java.awt.GridBagLayout());

        PokerChipsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Poker Chips"));

        ChipButton1.setText("1$");
        ChipButtonGroup.add(ChipButton1);
        ChipButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChipButton1ActionPerformed(evt);
            }
        });

        ChipButton2.setText("2$");
        ChipButtonGroup.add(ChipButton2);
        ChipButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChipButton2ActionPerformed(evt);
            }
        });

        ChipButton3.setText("3$");
        ChipButtonGroup.add(ChipButton3);
        ChipButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChipButton3ActionPerformed(evt);
            }
        });

        ChipButton4.setText("4$");
        ChipButtonGroup.add(ChipButton4);
        ChipButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChipButton4ActionPerformed(evt);
            }
        });

        ChipButton5.setText("5$");
        ChipButtonGroup.add(ChipButton5);
        ChipButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChipButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PokerChipsPanelLayout = new javax.swing.GroupLayout(PokerChipsPanel);
        PokerChipsPanel.setLayout(PokerChipsPanelLayout);
        PokerChipsPanelLayout.setHorizontalGroup(
            PokerChipsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PokerChipsPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(PokerChipsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ChipTextField)
                    .addGroup(PokerChipsPanelLayout.createSequentialGroup()
                        .addComponent(ChipButton1)
                        .addGap(5, 5, 5)
                        .addComponent(ChipButton2)
                        .addGap(5, 5, 5)
                        .addComponent(ChipButton3)
                        .addGap(5, 5, 5)
                        .addComponent(ChipButton4)
                        .addGap(5, 5, 5)
                        .addComponent(ChipButton5)))
                .addGap(41, 41, 41))
        );
        PokerChipsPanelLayout.setVerticalGroup(
            PokerChipsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PokerChipsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(PokerChipsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ChipButton1)
                    .addComponent(ChipButton2)
                    .addComponent(ChipButton3)
                    .addComponent(ChipButton4)
                    .addComponent(ChipButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ChipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 26;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        ControlPanel.add(PokerChipsPanel, gridBagConstraints);

        BetControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Bet Control"));

        MakeDealButton.setText("Deal");
        MakeDealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeDealButtonActionPerformed(evt);
            }
        });

        MakeResetButton.setText("Reset");
        MakeResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeResetButtonActionPerformed(evt);
            }
        });

        BalanceLabel.setText("Your balance");

        BetLabel.setText("Your bet");

        javax.swing.GroupLayout BetControlPanelLayout = new javax.swing.GroupLayout(BetControlPanel);
        BetControlPanel.setLayout(BetControlPanelLayout);
        BetControlPanelLayout.setHorizontalGroup(
            BetControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BetControlPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(BetControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BetControlPanelLayout.createSequentialGroup()
                        .addComponent(BalanceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(BetControlPanelLayout.createSequentialGroup()
                        .addComponent(BetLabel)
                        .addGap(12, 12, 12)))
                .addGroup(BetControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BetTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                    .addComponent(BalanceTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(BetControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MakeDealButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MakeResetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );
        BetControlPanelLayout.setVerticalGroup(
            BetControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BetControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BetControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MakeDealButton)
                    .addComponent(BalanceLabel)
                    .addComponent(BalanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(BetControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MakeResetButton)
                    .addComponent(BetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BetLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        ControlPanel.add(BetControlPanel, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComputerCardsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserCardsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(SplitPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ControlPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(ComputerCardsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(UserCardsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SplitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(ControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        ComputerCardsPanel.getAccessibleContext().setAccessibleName("");
        UserCardsPanel.getAccessibleContext().setAccessibleName("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ChipButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChipButton1ActionPerformed
        // TODO add your handling code here:
        setBet((Integer) betArray[0]);
        BetTextField.setText(getBet().toString() + "$");
    }//GEN-LAST:event_ChipButton1ActionPerformed

    private void ChipButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChipButton2ActionPerformed
        // TODO add your handling code here:
        setBet((Integer) betArray[1]);
        BetTextField.setText(getBet().toString() + "$");
    }//GEN-LAST:event_ChipButton2ActionPerformed

    private void ChipButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChipButton3ActionPerformed
        // TODO add your handling code here:
        setBet((Integer) betArray[2]);
        BetTextField.setText(getBet().toString() + "$");
    }//GEN-LAST:event_ChipButton3ActionPerformed

    private void ChipButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChipButton4ActionPerformed
        // TODO add your handling code here:
        setBet((Integer) betArray[3]);
        BetTextField.setText(getBet().toString() + "$");
    }//GEN-LAST:event_ChipButton4ActionPerformed

    private void ChipButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChipButton5ActionPerformed
        // TODO add your handling code here:
        setBet((Integer) betArray[4]);
        BetTextField.setText(getBet().toString() + "$");
    }//GEN-LAST:event_ChipButton5ActionPerformed

    private void MakeResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeResetButtonActionPerformed
        // TODO add your handling code here:
        setBet((Integer) 0);
        BetTextField.setText(getBet().toString() + "$");
    }//GEN-LAST:event_MakeResetButtonActionPerformed

    private void MakeDealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeDealButtonActionPerformed
        // TODO add your handling code here:
        afterdeal = true;
        if (checkEnoughMoney() == false) {
            ChipTextField.setText("No enough Balance, you lose");
            return;
        }

        if (getBalance() - getBet() >= 0) {
            UserHighHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("HighHand"));
            UserLowHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LowHand"));
            ComputerHighHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("HighHand"));
            ComputerLowHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LowHand"));
            pokersBuilder.generatePokers();
            userCards = pokersBuilder.getUserCards();
            computerCards = pokersBuilder.getComputerCards();
            setBalance((Integer) (getBalance() - getBet()));
            BalanceTextField.setText(getBalance().toString() + "$");
            try {
                makeUserPokersImage(getUserCards());
                makeComputerPokersImage(getComputerCards(), true);
            } catch (IOException ex) {
                Logger.getLogger(PaiGowPokerGUI.class.getName()).log(Level.SEVERE, "open image fail in MakeDealButtonActionPerformed", ex);
                System.exit(1);
            }
        } else {
            ChipTextField.setText("No enough Balance, please change Bet");
        }
    }//GEN-LAST:event_MakeDealButtonActionPerformed

    private void MakeSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeSplitActionPerformed
        // TODO add your handling code here:

        if (afterdeal == true) {
            // if no pay the bet
            if (bet == 0) {
                JOptionPane.showMessageDialog(UserCardsPanel, "There's no such thing as a free lunch, right?", "error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (selectCardQueue.size() == 2) {/* select two cards. swap them*/

                Poker tempPoker1 = numberToCardNameMap.get(selectCardQueue.peekFirst().getName());
                Poker tempPoker2 = numberToCardNameMap.get(selectCardQueue.peekLast().getName());
                if (checkTwoCardInHighHand(tempPoker1, tempPoker2)) {
                    replaceUserCardIcon(selectCardQueue.peekFirst(), UserCard6);
                    replaceUserCardIcon(selectCardQueue.peekLast(), UserCard7);
                    replaceUserCardNumber(numberToCardNameMap.get(selectCardQueue.peekFirst().getName()), getUserCards()[5]);
                    replaceUserCardNumber(numberToCardNameMap.get(selectCardQueue.peekLast().getName()), getUserCards()[6]);
                } else {
                    replaceUserCardIcon(selectCardQueue.peekFirst(), selectCardQueue.peekLast());
                    replaceUserCardNumber(numberToCardNameMap.get(selectCardQueue.peekFirst().getName()),
                            numberToCardNameMap.get(selectCardQueue.peekLast().getName()));
                }
            }

            // user's part
            cardsChecker.MakeCheck(getUserHighHandCards());
            CardsTypeChecker.PokerType userHighHandCardPokerType = cardsChecker.getPokerType();
            int userHighHandHighestCard = cardsChecker.getHighestCard();
            UserHighHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("HighHand " + userHighHandCardPokerType));

            cardsChecker.MakeCheck(getUserLowHandCards());
            CardsTypeChecker.PokerType userLowHandCardPokerType = cardsChecker.getPokerType();
            UserLowHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LowHand " + userLowHandCardPokerType));
            int userLowHandHighestCard = cardsChecker.getHighestCard();

            cardsChecker.MakeCheck(getUserCards());
            // make a MessageDialog

            if (userHighHandCardPokerType.compareTo(userLowHandCardPokerType) < 0) {
                JOptionPane.showMessageDialog(UserCardsPanel, "The Type of card in highHand show higher then lowHand", "error", JOptionPane.ERROR_MESSAGE);
                return;
            } else if (userHighHandCardPokerType.compareTo(userLowHandCardPokerType) == 0 && userHighHandHighestCard < userLowHandHighestCard) {
                JOptionPane.showMessageDialog(UserCardsPanel, "The Type of card in highHand show higher then lowHand", "error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // computer's part
            ComputerMove.computerSplitCard(getComputerCards());
            cardsChecker.MakeCheck(getComputerHighHandCards());
            CardsTypeChecker.PokerType computerHighHandCardPokerType = cardsChecker.getPokerType();
            ComputerHighHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("HighHand " + computerHighHandCardPokerType));

            cardsChecker.MakeCheck(getComputerLowHandCards());
            CardsTypeChecker.PokerType computerLowHandCardPokerType = cardsChecker.getPokerType();
            ComputerLowHandPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("LowHand " + computerLowHandCardPokerType));
            // set the res
            ComputerMove.computerSplitCard(getComputerCards());
            dealRes = ComputerMove.compareCards(getUserHighHandCards(), getUserLowHandCards(),
                    getComputerHighHandCards(), getComputerLowHandCards());

            setTheResult();
            try {

                // show the computer's card and cancel the select state in user's part
                makeComputerPokersImage(getComputerCards(), false);
                for (JLabel oneLabel : selectCardQueue) {
                    oneLabel.setBorder(null);
                }
                selectCardQueue.clear();
            } catch (IOException ex) {
                Logger.getLogger(PaiGowPokerGUI.class.getName()).log(Level.SEVERE, "open image fail in MakeSplitActionPerformed", ex);
                System.exit(1);
            }
        } else {
            afterdeal = false;
        }
    }//GEN-LAST:event_MakeSplitActionPerformed

    // Utility Function start in here
    private boolean checkEnoughMoney() {
        boolean firstChecker = true;
        for (int i = 0; i < betArray.length; i++) {
            boolean otherChecker;
            otherChecker = (getBalance() - getBet() >= 0);
            firstChecker |= otherChecker;
        }
        return firstChecker;
    }

    private void setTheResult() {
        if (dealRes == 1) {
            ChipTextField.setText("You Win " + bet + "$");
            balance += bet * 2;
        } else if (dealRes == 0) {
            ChipTextField.setText("You Tie");
            balance += bet;
        } else if (dealRes == -1) {
            ChipTextField.setText("You Lose " + bet + "$");
            balance -= bet;
        }

        BalanceTextField.setText(getBalance().toString() + "$");
    }

    private void replaceUserCardNumber(Poker inputOne, Poker inputTwo) {
        if (inputOne.equals(inputTwo) == false) {
            Poker.swapTwoPoker(inputOne, inputTwo);
        }
    }

    private boolean checkTwoCardInHighHand(Poker one, Poker two) {
        int index1 = 0, index2 = 0;

        for (int i = 0; i < getUserCards().length; i++) {
            if (getUserCards()[i].equals(one)) {
                index1 = i;
            }

            if (getUserCards()[i].equals(two)) {
                index2 = i;
            }
        }

        return 1 <= index1 && index1 <= 4 && 1 <= index2 && index2 <= 4;
    }

    private void replaceUserCardIcon(javax.swing.JLabel inputOne, javax.swing.JLabel inputTwo) {
        if (inputOne.equals(inputTwo) == false) {
            javax.swing.Icon tempIcon = inputOne.getIcon();
            inputOne.setIcon(inputTwo.getIcon());
            inputTwo.setIcon(tempIcon);
        }
    }

    /**
     * This function use to generate User's poker label image Because I don't
     * know how to make JLabel Array in netBeans GUI model this code is too
     * stupid in here. Thanks god there only 7 cards.
     */
    private void makeUserPokersImage(Poker[] UserCards) throws IOException {
        Image img;
        Image resizedImage;

        UserCard1.setIcon(null);
        img = ImageIO.read(new File("playing_cards_images/Playing_card_" + UserCards[0].getSuit() + "_" + UserCards[0].getNumberString() + ".jpg"));
        resizedImage = img.getScaledInstance(UserCard1.getWidth(), UserCard1.getHeight(), Image.SCALE_SMOOTH);
        UserCard1.setIcon(new ImageIcon(resizedImage));
        numberToCardNameMap.put(UserCard1.getName(), UserCards[0]);

        UserCard2.setIcon(null);
        img = ImageIO.read(new File("playing_cards_images/Playing_card_" + UserCards[1].getSuit() + "_" + UserCards[1].getNumberString() + ".jpg"));
        resizedImage = img.getScaledInstance(UserCard2.getWidth(), UserCard2.getHeight(), Image.SCALE_SMOOTH);
        UserCard2.setIcon(new ImageIcon(resizedImage));
        numberToCardNameMap.put(UserCard2.getName(), UserCards[1]);

        UserCard3.setIcon(null);
        img = ImageIO.read(new File("playing_cards_images/Playing_card_" + UserCards[2].getSuit() + "_" + UserCards[2].getNumberString() + ".jpg"));
        resizedImage = img.getScaledInstance(UserCard3.getWidth(), UserCard3.getHeight(), Image.SCALE_SMOOTH);
        UserCard3.setIcon(new ImageIcon(resizedImage));
        numberToCardNameMap.put(UserCard3.getName(), UserCards[2]);

        UserCard4.setIcon(null);
        img = ImageIO.read(new File("playing_cards_images/Playing_card_" + UserCards[3].getSuit() + "_" + UserCards[3].getNumberString() + ".jpg"));
        resizedImage = img.getScaledInstance(UserCard4.getWidth(), UserCard4.getHeight(), Image.SCALE_SMOOTH);
        UserCard4.setIcon(new ImageIcon(resizedImage));
        numberToCardNameMap.put(UserCard4.getName(), UserCards[3]);

        UserCard5.setIcon(null);
        img = ImageIO.read(new File("playing_cards_images/Playing_card_" + UserCards[4].getSuit() + "_" + UserCards[4].getNumberString() + ".jpg"));
        resizedImage = img.getScaledInstance(UserCard5.getWidth(), UserCard5.getHeight(), Image.SCALE_SMOOTH);
        UserCard5.setIcon(new ImageIcon(resizedImage));
        numberToCardNameMap.put(UserCard5.getName(), UserCards[4]);

        UserCard6.setIcon(null);
        img = ImageIO.read(new File("playing_cards_images/Playing_card_" + UserCards[5].getSuit() + "_" + UserCards[5].getNumberString() + ".jpg"));
        resizedImage = img.getScaledInstance(UserCard6.getWidth(), UserCard6.getHeight(), Image.SCALE_SMOOTH);
        UserCard6.setIcon(new ImageIcon(resizedImage));
        numberToCardNameMap.put(UserCard6.getName(), UserCards[5]);

        UserCard7.setIcon(null);
        img = ImageIO.read(new File("playing_cards_images/Playing_card_" + UserCards[6].getSuit() + "_" + UserCards[6].getNumberString() + ".jpg"));
        resizedImage = img.getScaledInstance(UserCard7.getWidth(), UserCard7.getHeight(), Image.SCALE_SMOOTH);
        UserCard7.setIcon(new ImageIcon(resizedImage));
        numberToCardNameMap.put(UserCard7.getName(), UserCards[6]);
    }

    /**
     * This function use to generate Computer's poker label image Because I
     * don't know how to make JLabel Array in netBeans GUI model this code is
     * too stupid in here. Thanks god there only 7 cards.
     */
    private void makeComputerPokersImage(Poker[] ComputerCards, boolean hideFlag) throws IOException {
        if (hideFlag == true) {
            Image img = ImageIO.read(new File("playing_cards_images/back.jpg"));
            Image resizedImage;
            ComputerCard1.setIcon(null);
            resizedImage = img.getScaledInstance(ComputerCard1.getWidth(), ComputerCard1.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard1.setIcon(new ImageIcon(resizedImage));

            ComputerCard2.setIcon(null);
            resizedImage = img.getScaledInstance(ComputerCard2.getWidth(), ComputerCard2.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard2.setIcon(new ImageIcon(resizedImage));

            ComputerCard3.setIcon(null);
            resizedImage = img.getScaledInstance(ComputerCard3.getWidth(), ComputerCard3.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard3.setIcon(new ImageIcon(resizedImage));

            ComputerCard4.setIcon(null);
            resizedImage = img.getScaledInstance(ComputerCard4.getWidth(), ComputerCard4.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard4.setIcon(new ImageIcon(resizedImage));

            ComputerCard5.setIcon(null);
            resizedImage = img.getScaledInstance(ComputerCard5.getWidth(), ComputerCard5.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard5.setIcon(new ImageIcon(resizedImage));

            ComputerCard6.setIcon(null);
            resizedImage = img.getScaledInstance(ComputerCard6.getWidth(), ComputerCard6.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard6.setIcon(new ImageIcon(resizedImage));

            ComputerCard7.setIcon(null);
            resizedImage = img.getScaledInstance(ComputerCard7.getWidth(), ComputerCard7.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard7.setIcon(new ImageIcon(resizedImage));

        } else {
            Image img;
            Image resizedImage;

            ComputerCard1.setIcon(null);
            img = ImageIO.read(new File("playing_cards_images/Playing_card_" + ComputerCards[0].getSuit() + "_" + ComputerCards[0].getNumberString() + ".jpg"));
            resizedImage = img.getScaledInstance(ComputerCard1.getWidth(), ComputerCard1.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard1.setIcon(new ImageIcon(resizedImage));

            ComputerCard2.setIcon(null);
            img = ImageIO.read(new File("playing_cards_images/Playing_card_" + ComputerCards[1].getSuit() + "_" + ComputerCards[1].getNumberString() + ".jpg"));
            resizedImage = img.getScaledInstance(ComputerCard2.getWidth(), ComputerCard2.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard2.setIcon(new ImageIcon(resizedImage));

            ComputerCard3.setIcon(null);
            img = ImageIO.read(new File("playing_cards_images/Playing_card_" + ComputerCards[2].getSuit() + "_" + ComputerCards[2].getNumberString() + ".jpg"));
            resizedImage = img.getScaledInstance(ComputerCard3.getWidth(), ComputerCard3.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard3.setIcon(new ImageIcon(resizedImage));

            ComputerCard4.setIcon(null);
            img = ImageIO.read(new File("playing_cards_images/Playing_card_" + ComputerCards[3].getSuit() + "_" + ComputerCards[3].getNumberString() + ".jpg"));
            resizedImage = img.getScaledInstance(ComputerCard4.getWidth(), ComputerCard4.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard4.setIcon(new ImageIcon(resizedImage));

            ComputerCard5.setIcon(null);
            img = ImageIO.read(new File("playing_cards_images/Playing_card_" + ComputerCards[4].getSuit() + "_" + ComputerCards[4].getNumberString() + ".jpg"));
            resizedImage = img.getScaledInstance(ComputerCard5.getWidth(), ComputerCard5.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard5.setIcon(new ImageIcon(resizedImage));

            ComputerCard6.setIcon(null);
            img = ImageIO.read(new File("playing_cards_images/Playing_card_" + ComputerCards[5].getSuit() + "_" + ComputerCards[5].getNumberString() + ".jpg"));
            resizedImage = img.getScaledInstance(ComputerCard6.getWidth(), ComputerCard6.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard6.setIcon(new ImageIcon(resizedImage));

            ComputerCard7.setIcon(null);
            img = ImageIO.read(new File("playing_cards_images/Playing_card_" + ComputerCards[6].getSuit() + "_" + ComputerCards[6].getNumberString() + ".jpg"));
            resizedImage = img.getScaledInstance(ComputerCard7.getWidth(), ComputerCard7.getHeight(), Image.SCALE_SMOOTH);
            ComputerCard7.setIcon(new ImageIcon(resizedImage));
        }
    }

    /**
     * @return the balance
     */
    public Integer getBalance() {
        return balance;
    }

    /**
     * @param balance the balance to set
     */
    public void setBalance(Integer balance) {
        this.balance = balance;
    }

    /**
     * @return the bet
     */
    public Integer getBet() {
        return bet;
    }

    /**
     * @param bet the bet to set
     */
    public void setBet(Integer bet) {
        this.bet = bet;
    }

    public Poker[] getUserHighHandCards() {
        return java.util.Arrays.copyOfRange(getUserCards(), 0, 5);
    }

    public Poker[] getUserLowHandCards() {
        return java.util.Arrays.copyOfRange(getUserCards(), 5, getUserCards().length);
    }

    public Poker[] getComputerHighHandCards() {
        return java.util.Arrays.copyOfRange(getComputerCards(), 0, 5);
    }

    public Poker[] getComputerLowHandCards() {
        return java.util.Arrays.copyOfRange(getComputerCards(), 5, getComputerCards().length);
    }

    // Utility Function end
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaiGowPokerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaiGowPokerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaiGowPokerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaiGowPokerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaiGowPokerGUI().setVisible(true);
            }
        });
    }

    // Data Variable declaration - can be modifed
    private Integer balance = 50;
    private Integer bet = 0;
    private final int[] betArray = {1, 2, 3, 4, 5};
    private PokersBuilder pokersBuilder;
    private LinkedList<JLabel> selectCardQueue;          // save two select cards in queue
    private Poker[] userCards;
    private Poker[] computerCards;
    private java.util.HashMap<String, Poker> numberToCardNameMap; // make map: JLabel Compeont's name <-> Poker
    private CardsTypeChecker cardsChecker;
    private boolean afterdeal = false;
    private int dealRes = 0;
    // Data Variable declaration end

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BalanceLabel;
    private javax.swing.JTextField BalanceTextField;
    private javax.swing.JPanel BetControlPanel;
    private javax.swing.JLabel BetLabel;
    private javax.swing.JTextField BetTextField;
    private javax.swing.JButton ChipButton1;
    private javax.swing.JButton ChipButton2;
    private javax.swing.JButton ChipButton3;
    private javax.swing.JButton ChipButton4;
    private javax.swing.JButton ChipButton5;
    private javax.swing.ButtonGroup ChipButtonGroup;
    private javax.swing.JTextField ChipTextField;
    private javax.swing.JLabel ComputerCard1;
    private javax.swing.JLabel ComputerCard2;
    private javax.swing.JLabel ComputerCard3;
    private javax.swing.JLabel ComputerCard4;
    private javax.swing.JLabel ComputerCard5;
    private javax.swing.JLabel ComputerCard6;
    private javax.swing.JLabel ComputerCard7;
    private javax.swing.JPanel ComputerCardsPanel;
    private javax.swing.JPanel ComputerHighHandPanel;
    private javax.swing.JPanel ComputerLowHandPanel;
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JButton MakeDealButton;
    private javax.swing.JButton MakeResetButton;
    private javax.swing.JButton MakeSplit;
    private javax.swing.JPanel PokerChipsPanel;
    private javax.swing.JPanel SplitPanel;
    private javax.swing.JLabel UserCard1;
    private javax.swing.JLabel UserCard2;
    private javax.swing.JLabel UserCard3;
    private javax.swing.JLabel UserCard4;
    private javax.swing.JLabel UserCard5;
    private javax.swing.JLabel UserCard6;
    private javax.swing.JLabel UserCard7;
    private javax.swing.JPanel UserCardsPanel;
    private javax.swing.JPanel UserHighHandPanel;
    private javax.swing.JPanel UserLowHandPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the userCards
     */
    public Poker[] getUserCards() {
        return userCards;
    }

    /**
     * @return the computerCards
     */
    public Poker[] getComputerCards() {
        return computerCards;
    }

    public class UserCardMouseListener extends java.awt.event.MouseAdapter {

        public UserCardMouseListener() {
            super();
        }

        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {

            if (selectCardQueue.contains(evt.getSource()) == false) {
                if (selectCardQueue.size() >= 2) {
                    selectCardQueue.peekFirst().setBorder(null);
                    selectCardQueue.poll();
                }
                selectCardQueue.offer((JLabel) evt.getSource());
            }

            for (JLabel oneLabel : selectCardQueue) {
                oneLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 3));
            }
        }
    }
}
